{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the AgriPredict application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user.",
          "format": "uuid"
        },
        "userName": {
          "type": "string",
          "description": "The username of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "registrationDate": {
          "type": "string",
          "description": "The date and time the user registered.",
          "format": "date-time"
        },
        "googleId": {
          "type": "string",
          "description": "The Google ID of the user, if they signed up with Google."
        }
      },
      "required": [
        "id",
        "userName",
        "email",
        "registrationDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user data, including userName, email, registrationDate, and Google ID.  Path-based ownership enables simple security rules based on request.auth.uid == userId.",
          "params": [
            {
              "name": "userId",
              "description": "The unique ID of the user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to store user data. Each user has a dedicated document in the `/users` collection, identified by their unique ID. This direct path-based ownership ensures straightforward security rules and efficient data retrieval. The structure avoids nested collections to minimize complexity and potential security rule issues. This design supports secure `list` operations as each user's data is isolated within their document, adhering to the QAPs. Since no collaborative features or subcollections exist in the current requirements, denormalization is not applicable at this stage. This maintains Authorization Independence."
  }
}